import express from 'express';
import { v4 as uuidv4 } from 'uuid';

/**
 * Describes a latitude/longitude coordinate in decimal form
 */
interface ILatLng {
    latitude: number;
    longitude: number;
};

/**
 * Describes a platform user
 */
interface IUser {
    /**
     * Autogenerated UserId, UUID-v4
     */
    id: string;

    /**
     * User's friendly first name 
     */ 
    firstName: string; 

    /**
     * User's friendly surname
     */
    lastName: string;

    /**
     * User's email address
     */
    email: string;

    /**
     * User's current LatLng
     */
    location?: ILatLng;
}

// TODO: put in a data-centered model, abstract from the controller
let userDatabase: IUser[] = [];

const listUsers = async (_: express.Request, res: express.Response) => {
    return res.status(200).json({
        status: 'ok',
        users: userDatabase
    });
}

const getUser = async(req: express.Request, res: express.Response) => {
    const { userId } = req.params;
    if (!userId) {
        return res.status(404).json({ status: 'not found' });
    }

    const user = userDatabase.find((u) => u.id === userId);
    if (user) {
        return res.status(200).json({ user });
    }

    return res.status(404).json({ status: 'no such user' });
}

const deleteUser = async(req: express.Request, res: express.Response) => {
    const { userId } = req.params;
    if (!userId) {
        return res.status(404).json({ status: 'not found'});
    }

    const newUserDatabase = userDatabase.filter((u: IUser) => u.id !== userId);
    if ( newUserDatabase.length !== userDatabase.length ) {
        userDatabase = newUserDatabase;
        return res.status(204).json({ status: 'deleted' });
    };

    return res.status(404).json({ status: 'no change' });
};

const addUser = async(req: express.Request, res: express.Response) => {
    const { firstName, lastName, email, location } = req.body;

    const user: IUser = {
        id: uuidv4(),
        firstName,
        lastName,
        email,
        location: location || { latitude: 0, longitude: 0 },
    }

    const possibleDuplicate = userDatabase.find((u) => 
        u.email === user.email
        || (u.firstName === user.firstName && u.lastName === user.lastName)
    );

    if (possibleDuplicate) {
        return res.status(409).json({ status: 'duplicate' });
    }
    userDatabase.push(user);

    return res.status(200).json({ status: 'ok', user });
};

const usersController = {
    addUser,
    deleteUser,
    getUser,
    listUsers,
};

export { usersController };
